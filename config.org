#+STARTUP: overview

* Def. Functions

text manipulation

#+BEGIN_SRC emacs-lisp
  (defun deadreth/return ()
    (interactive)
    (move-end-of-line 1)
    (newline-and-indent))
#+END_SRC

* Org

  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda () (auto-fill-mode 1)))
    (add-hook 'org-mode-hook (lambda () (electric-pair-mode nil)))
    (when window-system (add-hook 'org-mode-hook 'hl-line-mode))
    (add-hook 'org-mode-hook (lambda () (local-set-key (kbd "C-;") 'deadreth/return)))


    (use-package org-superstar
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))


    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist
		 '("el" . "src emacs-lisp"))


    (setq org-src-window-setup 'current-window)


    (setq org-tag-alist '(("@work" . ?w)
			  ("@home" . ?h)
			  ("organized" . ?o)
			  ("laptop" . ?l)))


    (setq org-todo-keywords
	  '((sequence "TODO(t)" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")
	    (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
	    (sequence "|" "CANCELED")))
  #+end_src

* Terminal
  
  #+begin_src emacs-lisp
    (use-package vterm
      :ensure t
      :bind
      ("s-t" . vterm))
  #+End_src

* Spice
  Ngspice is a circuit network simulation tool alike ltspice but
  working just with netlist files.

  #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.cir\\'" . spice-mode))
  #+end_src

* Programming Stuff

** Common

*** Stuff what every packege needs

   #+begin_src emacs-lisp
     (use-package flycheck
       :diminish flycheck-mode
       :ensure t
       :hook
       (company-mode . flycheck-mode))

     (use-package flycheck-clang-analyzer
       :ensure t
       :config
       (with-eval-after-load 'flycheck
	 (require 'flycheck-clang-analyzer)
	 (flycheck-clang-analyzer-setup)))

     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :hook
       (company-mode . yas-minor-mode)
       :config
       (use-package yasnippet-snippets
	 :ensure t)
       (yas-reload-all))

     (use-package company
       :ensure t
       :diminish company-mode
       :hook (prog-mode . company-mode)
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-legth 2))
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") #'company-select-next)
       (define-key company-active-map (kbd "C-p") #'company-select-previous))
   #+end_src

*** Projectile

    #+begin_src emacs-lisp
      (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	;; NOTE: Set this to the folder where you keep your Git repos!
	(when (file-directory-p "~/projects/code")
	  (setq projectile-project-search-path '("~/projects/code")))
	(setq projectile-switch-project-action #'projectile-dired))

      (use-package counsel-projectile
	:ensure t
	:config (counsel-projectile-mode))
    #+end_src

*** Language Servers LSP-Mode

   [[https://emacs-lsp.github.io/lsp-mode/page/installation/]]
   
   #+begin_src emacs-lisp

     (use-package lsp-mode
       :ensure t
       :init
       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       ;;(setq lsp-keymap-prefix "C-c l")
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	      (sh-mode . lsp-deferred)
	      ;; if you want which-key integration
	      (lsp-mode . lsp-enable-which-key-integration))
       :commands (lsp lsp-deferred))

     ;; optionally
     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode)

     ;; if you are helm user
     (use-package helm-lsp
       :ensure t
       :commands helm-lsp-workspace-symbol)

     (use-package lsp-treemacs
       :ensure t
       :commands lsp-treemacs-errors-list)

   #+end_src

** Python

   + dependencies are
   =pip install python-language-server=
   =pip install virtualenv=

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook
	    (lambda () (local-set-key (kbd "C-;") 'deadreth/return)))
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'flycheck-mode)

  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
				    company-etags
				    company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+end_src

** C, C++

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook
	    (lambda () (local-set-key (kbd "C-;") 'deadreth/return)))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :diminish irony-mode
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+end_src
