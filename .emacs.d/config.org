#+STARTUP: overview

* Def. Functions

#+BEGIN_SRC emacs-lisp

  ;; text manipulation
  (defun deadreth/return ()
    (interactive)
    (move-end-of-line 1)
    (newline-and-indent))

#+END_SRC

* Org

  #+begin_src emacs-lisp

    ;; (use-package org-roam
    ;;       :ensure t
    ;;       :hook
    ;;       (after-init . org-roam-mode)
    ;;       :diminish
    ;;       (org-roam-mode)
    ;;       :custom
    ;;       (org-roam-directory "~/study/roam/")
    ;;       :bind (:map org-roam-mode-map
    ;;               (("C-c n l" . org-roam)
    ;;                ("C-c n f" . org-roam-find-file)
    ;;                ("C-c n g" . org-roam-graph))
    ;;               :map org-mode-map
    ;;               (("C-c n i" . org-roam-insert))
    ;;               (("C-c n I" . org-roam-insert-immediate))))

    (use-package org-journal
      :ensure t
      :config
      (setq org-journal-dir "~/journal/"
	    org-journal-date-prefix "#+title: "
	    org-journal-time-prefix "* "
	    org-journal-file-format "%Y-%m-%d.org"
	    org-journal-date-format "%A, %d %B %Y"))


(add-hook 'org-mode-hook (lambda () (local-set-key (kbd "C-;") 'deadreth/return)))

(add-hook 'org-mode-hook (lambda () (auto-fill-mode 1)))
(add-hook 'org-mode-hook (lambda () (electric-pair-mode nil)))
(when window-system (add-hook 'org-mode-hook 'hl-line-mode))

(use-package org-superstar
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

(require 'org-tempo)
(add-to-list 'org-structure-template-alist
	     '("el" . "src emacs-lisp"))

;; for pretty org
;(setq org-hide-emphasis-markers t)

;; different font sizes
;; (let* ((variable-tuple
;;         (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
;;               ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
;;               ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
;;               ((x-list-fonts "Verdana")         '(:font "Verdana"))
;;               ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
;;               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
;;        (base-font-color     (face-foreground 'default nil 'default))
;;        (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
;;   (custom-theme-set-faces
;;    'user
;;    `(org-level-8 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-7 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-6 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-5 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
;;    `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
;;    `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
;;    `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
;;    `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

(setq org-src-window-setup 'current-window)

(setq org-tag-alist '(("@work" . ?w)
		      ("@home" . ?h)
		      ("organized" . ?o)
		      ("laptop" . ?l)))

(setq org-todo-keywords
      '((sequence "TODO(t)" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")
        (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
        (sequence "|" "CANCELED")))


  #+end_src

=======
>>>>>>> origin/main
* Programming Stuff

** Eglot

#+begin_src emacs-lisp
  ;; dependencies
  ;; (use-package project
  ;;   :ensure t)
  ;; (use-package xref
  ;;   :ensure t)
  ;; (use-package eldoc
  ;;   :ensure t)

  ;; (use-package eglot
  ;;   :ensure t)
#+end_src

** Python

   + dependencies are
   =pip install python-language-server=
   =pip install virtualenv=

#+begin_src emacs-lisp
  ;; eglot
  ;;(add-hook 'python-mode-hook 'eglot-ensure)

  (add-hook 'python-mode-hook
	    (lambda () (local-set-key (kbd "C-;") 'deadreth/return)))
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'flycheck-mode)

  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
				    company-etags
				    company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+end_src

** C, C++

#+begin_src emacs-lisp

  (add-hook 'c-mode-hook
	    (lambda () (local-set-key (kbd "C-;") 'deadreth/return)))

#+end_src
